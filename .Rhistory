modelFit <- train(chd ~ age + alcohol + obesity + typea + tobacco + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
testpredict <- predict(ModelFit, newdata = trainSA)
testpredict <- predict(modelFit, newdata = trainSA)
missClass(trainSA, testpredict)
testpredict <- predict(modelFit, newdata = testSA)
missClass(testSA, testpredict)
204.9/231
?predict
testpredict <- predict(modelFit, newdata = testSA, type = "response")
testpredict <- predict.glm(modelFit, newdata = testSA, type = "response")
testpredict <- predict(modelFit, newdata = testSA, type = "raw")
missClass(testSA, testpredict)
testpredict <- predict(modelFit$finalModel, newdata = testSA, type = "raw")
testpredict <- predict(modelFit$finalModel, newdata = testSA, type = "response")
missClass(testSA, testpredict)
trainpredict <- predict(modelFit$finalModel, newdata = trainSA, type = "response")
missClass(trainSA, trainpredict)
missClass = function(values,prediction){sum(((prediction > 0.5)*1))/length(values)}
missClass(trainSA, trainpredict)
missClass(testSA, testpredict)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAheart$chd <- as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
modelFit <- train(chd ~ age + alcohol + obesity + typea + tobacco + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict <- predict(modelFit$finalModel, newdata = testSA, type = "response")
missClass(testSA, testpredict)
trainpredict <- predict(modelFit$finalModel, newdata = trainSA, type = "response")
?as.factor
SAheart$chd <- as.factor(SAheart$chd, levels = c(0,1))
SAheart$chd <- as.factor(SAheart$chd, levels = c("0","1"))
SAheart$chd <- as.factor(SAheart$chd, labels = c("0","1"))
> missClass = function(values,prediction){sum(((prediction > 1.5)*1) != values)/length(values)}
> missClass = function(values,prediction){sum(((prediction > 1.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 1.5)*1) != values)/length(values)}
missClass(testSA, testpredict)
204.8/231
View(testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict <- predict(modelFit$finalModel, newdata = testSA, type = "response")
trainpredict <- predict(modelFit$finalModel, newdata = trainSA, type = "response")
missClass(testSA, testpredict)
trainpredict <- predict(modelFit, newdata = trainSA, type = "response")
set.seed(13234)
modelFit <- train(chd ~ age + alcohol + obesity + typea + tobacco + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict <- predict(modelFit$finalModel, newdata = testSA, type = "response")
missClass(testSA, testpredict)
trainpredict <- predict(modelFit$finalModel, newdata = trainSA, type = "response")
missClass(testSA$chd, testpredict)
missClass(trainSAchd, trainpredict)
missClass(trainSA$chd, trainpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
?vowel.test
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
rfNews()
?varImp
varImp(modFit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
inTrain <- createDataPartition(segmentationOriginal$Case, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modelFit <- train(Class ~ ., data = training, method = "rpart")
modelFit$finalModel
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
mod1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
?predict
pred1 <- predict(mod1, vowel.test)
?confusionMatrix
confusionMatrix(pred1)
confusionMatrix(pred1, vowel.test)
confusionMatrix(pred1, vowel.test$y)
mod2 <- train(y ~ ., data = vowel.train, method = "gbm", prox = TRUE)
mod2 <- train(y ~ ., data = vowel.train, method = "gbm", prox = TRUE)
mod2 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
pred2 <- predict(mod2, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred2, vowel.test$y)
pred3 <- data.frame(mod1, mod2. y = vowel.test$y)
pred3 <- data.frame(mod1, mod2, y = vowel.test$y)
pred3 <- data.frame(pred1, pred2, y = vowel.test$y)
mod3 <- train(y ~ ., data = pred3, method = "gam")
warnings()
predc <- predict(mod3, pred3)
confusionMatrix(predc, vowel.test$y)
preddf <- data.frame(pred1, pred2, y = vowel.train$y)
preddf <- data.frame(mod1, mod2, y = vowel.train$y)
preddf <- data.frame(predict(mod1, vowel.test), predict(mod2, vowel.test), y = vowel.train$y)
preddf <- data.frame(predict(mod1, vowel.train), predict(mod2, vowel.train), y = vowel.train$y)
mod3 <- train(y ~ ., data = pred3, method = "gam")
mod3 <- train(y ~ ., data = preddf, method = "gam")
predc <- predict(mod3, pred3)
predc <- predict(mod3, vowel.test$y)
predf1 <-predict(mod1, vowel.train)
predf2 <-predict(mod2, vowel.train)
preddf <- data.frame(predf1, predf2, y = vowel.train$y)
mod3 <- train(y ~ ., data = pred3, method = "gam")
mod3 <- train(y ~ ., data = preddf, method = "gam")
predc <- predict(mod3, vowel.test$y)
confusionMatrix()predc
confusionMatrix(predc)
confusionMatrix(predc,vowel.test$y)
predc <- predict(mod3, vowel.test)
confusionMatrix(predc,vowel.test$y)
predc <- predict(mod3, newdata = vowel.test)
preddf <- data.frame(pred1, pred2, y = vowel.test$y)
mod3 <- train(y ~ ., data = preddf, method = "gam")
mod3 <- train(y ~ ., method = "gam", data = preddf)
preddf <- data.frame(pred1, pred2, result = vowel.test$y)
mod3 <- train(result ~ ., method = "gam", data = preddf)
pred1
combpreddf <- data.frame(pred1, pred2
data.frame(pred1, pred2)
combpreddf <- data.frame(pred1, pred2)
mod3 <- train(result ~ ., method = "gam", data = preddf)
combpred <- predict(mod3, combpreddf)
confusionMatrix(combpred, vowel.test$y)
mod3$finalModel
combpred <- predict(mod3$finalModel, combpreddf)
combpred <- predict(mod3, combpreddf)
set.seed(33833)
mod1 <- train(y ~ ., data = vowel.train, method = "rf", trControl = trainControl(method = "cv"), numbers = 3)
pred1 <- predict(mod1, vowel.test)
confusionMatrix(pred1, vowel.test$y)
set.seed(33833)
mod2 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred2, vowel.test$y)
pred3 <- data.frame(pred1, pred2, y = vowel.test$y)
mod3 <- train(y ~ ., data = pred3, method = "gam")
predc <- predict(mod3, vowel.test$y)
confusionMatrix(predc, vowel.test$y)
pred3 <- preidct(mod1, vowel.train)
pred3 <- predict(mod1, vowel.train)
pred4 <- predict(mod2, vowel.train)
pred3 <- data.frame(pred3, pred4, y = vowel.test$y)
pred3 <- data.frame(pred3, pred4, y = vowel.train$y)
pred3 <- predict(mod1, vowel.train)
pred5 <- data.frame(pred3, pred4, y = vowel.train$y)
mod3 <- train(y ~ ., data = pred3, method = "gam")
mod3 <- train(y ~ ., data = pred5, method = "gam")
predc <- predict(mod3, vowel.test$y)
install.packages(c("roxygen2", "yhat", "yhatr", "fields"))
?olSums
>colSums
?colSums
?dgamma
?predict
?lm
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmod <- train(diagnosis ~ ., method = "rf", data = training)
rfpred <- predict(rfmod, testing)
confusionMatrix(rfpred,testing)
confusionMatrix(rfpred,testing$diagnosis)
rfpredd <- predict(rfmod, testing$diagnosis)
gbmmod <- train(diagnosis ~ ., method = "gbm", data = training)
gbmpred <- predict(gbmmod, testing)
confusionMatrix(gbmpred,testing$diagnosis)
ldamod <- train(diagnosis ~ ., method = "lda", data = training)
ldapred <- predict(ldamod, testing)
confusionMatrix(ldapred,testing$diagnosis)
combpreddf <- data.frame(rfmod, gbmmod, ldamod, diagnosis = testing$diagnosis)
combpreddf <- data.frame(rfpred, gbmpred, ldapred, diagnosis = testing$diagnosis)
combmod <- train(diagnosis ~ ., method = "rf", data = combpreddf)
combpred <- pred(combmod, testing$diagnosis)
combpred <- predict(combmod, testing$diagnosis)
combpred <- predict(combmod, testing)
confusionMatrix(combpred,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?concrete
lassomod <- train(CompressiveStrength ~ ., method = "lasso", data = training)
?plot.enet
plot(lassomod, xvar = "penalty")
plot(lassomod, xvar = "penalty", use.color = TRUE)
plot(lassomod$coefnames, xvar = "penalty", use.color = TRUE)
plot(lassomod, xvar = "fraction")
type(lassomod)
?type
typeof(lassomod)
lassomod$coefnames
lassomod$BlastFurnaceSlag
lassomod$coefficients
coefficients(lassomod)
?enet
?attach
lassomod2 <- enet(concrete$CompressiveStrength, concrete[, -9, lamda = 0 ])
lassomod2 <- enet(concrete$CompressiveStrength, concrete[, -9], lamda = 0)
lassomod2 <- enet(concrete[, -9], concrete$CompressiveStrength, lamda = 0)
lassomod2 <- enet(concrete[, -9], concrete[,9], lamda = 0)
lassomod2 <- enet(concrete[,1:8], concrete[,9], lamda = 0)
lassomod2 <- enet(concrete[,1:8], concrete[,9])
lassomod2 <- enet(as.matrix(concrete[, -9]), as.matrix(concrete[,9]), lamda = 0)
lassomod2 <- enet(as.matrix(concrete[, -9]), as.matrix(concrete[,9]))
plot(lassomod2, xvar = "penalty")
plot(lassomod2, xvar = "penalty", use.color = TRUE)
?plot
?legend
legend()
legend("topright", legend = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate",  "Age"))
legend("topright", legend = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate",  "Age"), col = 1:8)
legend("topright", legend = names(lassomod2)[-9], col = 1:8)
legend("topright", legend = names(lassomod2$actions)[-9], col = 1:8)
plot(lassomod2, xvar = "penalty", use.color = TRUE)
lassomod2$actions
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?read.csv
setwd("~/RWorkDir")
library(lubridate)  # For year() function below
dat = read.csv("~/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
?bats
batmod <- bats(training)
batmod <- bats(tstrain)
fcast <- forecast(batmod)
accuracy((fcast,testing$visitsTumblr))
accuracy(fcast,testing$visitsTumblr)
?accuracy
?forecast
fcast <- forecast(batmod, h = 235)
accuracy(fcast,testing$visitsTumblr)
confusionMatrix((fcast,testing$visitsTumblr))
confusionMatrix(fcast,testing$visitsTumblr)
fcast$upper
tstrain
testing$visitsTumblr
95int <- fcast$upper
95cinf <- fcast$upper
nfci <- fcast$upper
tstest <- testing$visitsTumblr
nfci[,1] < tstest < nfci[,2]
nfci[,1] < tstest & tstest < nfci[,2]
tstest[nfci[,1] < tstest & tstest < nfci[,2]]
length(tstest[nfci[,1] < tstest & tstest < nfci[,2]])/length(tstest)
25/235
?bats
?forecast
fcast <- forecast(batmod, h = 235, level = 95)
length(tstest[fcast$lower < tstest & tstest < fcast$upper)/length(tstest)
length(tstest[fcast$lower < tstest & tstest < fcast$upper])/length(tstest)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?svm
set.seed(325)
svm(CompressiveStength ~., data = training)
library(e1071)
set.seed(325)
svm(CompressiveStength ~., data = training)
set.seed(325)
svm(CompressiveStrength ~., data = training)
consvm <- svm(CompressiveStrength ~., data = training)
accuracy(consvm, testing)
confc <- forecast(consvm)
predict(consvm, testing)
conpred <- predict(consvm, testing)
accuracy(conpred, testing)
confusionMatrix(conpred, testing)
confusionMatrix(conpred, testing$CompressiveStrength)
accuracy(conpred, testing$CompressiveStrength)
install.packages("xgboost")
training <- read.csv("~/pml-training.csv")
training <- read.csv("~/RWorkDir/pml-training.csv")
training <- read.csv("~/pml-training.csv")
setwd("~/RWorkDir")
training <- read.csv("~/pml-training.csv")
training <- read.csv("~/pml-training.csv")
training <- read.csv("~/pml-training.csv")
training <- read.csv("~/RWorkDir/pml-training.csv")
names(training)
install.packages("doMC")
library(doMC)
training <- read.csv("~/pml-training.csv")
install.packages(c("doSNOW", "doParallel"))
?read.csv
training <- trainging [, -(2:4)]
training <- training [, -(2:4)]
training <- read.csv("~/pml-training.csv")
training <- training [, -(c(1,3:5))]
training <- read.csv("~/pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
View(training)
library(caret)
?train
training <- read.csv("~/pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
training <- training[, -(c(1,3:5))]
library(caret)
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10))
library(caret)
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rf")
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10), na.action = na.omit)
set.seed(3456)
trainmod <- train( classe ~., data = training, na.action = na.omit, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10))
set.seed(3456)
trainmod <- train( classe ~., data = training, na.action = na.omit, method = "rpart",trControl = trainControl(method = "repeatedcv", number = 10))
?na.action
na.action(na.omit(c(1, NA)))
?read.csv
?replace
training <- relplace(x = training, list = NA, values = "NA")
training <- replace(x = training, list = NA, values = "NA")
training[is.na(training)] <- "NA"
View(training)
trainmod <- train( classe ~., data = training, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10))
raining <- read.csv("~/pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
training <- read.csv("~/pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
training <- training[, -(c(1,3:5))]
?na.omit
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
na.omit(DF)
na.omit((training))
View(training)
length(training)
for (i in length(training)){
training[,i] <- factor(training[,i])
}
for (i in length(training)){
training[,i] <- factor(training[,i])
}
for (i in length(training)){
training[,i] <- as.factor(training[,i])
}
training[,4] <- factor(training[,4])
for (i in 1:length(training)){
training[,i] <- factor(training[,i])
}
trainmod <- train( classe ~., data = training, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10))
for (i in 1:length(training)){
training[,i] <- factor(training[,i])
}
training[is.na(training)] <- "NA"
warnings
warnings()
levels(training$skewness_yaw_dumbbell)
?grep
grep("yaw", names(training))
training <- read.csv("~/pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
training <- training[, -(c(1,3:5))]
yaw <- grep("yaw", names(training))
training <- training[, -yaw]
trainmod <- train( classe ~., data = training, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10))
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10))
trainmod
fit
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rf")
trainmod
?randomForest
randomForest(classe ~., data = training, method = "rf")
randomForest(classe ~., data = training)
trainpred <- predict(trainmod, training$classe)
trainpred <- predict(trainmod, training)
confusionMatrix(trainpred,training$classe)
length(trainpred)
trainpred <- predict(trainmod, training)
?predict
trainpred <- predict(training, trainmod)
trainpred <- predict(trainmod, training)
length(trainpred)
trainmod
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rf")
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rf",trControl = trainControl(method = "repeatedcv", number = 10))
trainmod
length(trainmod)
trainmod
trainpred <- predict(trainmod, training)
length(trainpred)
trainpred
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "rpart",trControl = trainControl(method = "repeatedcv", number = 10))
trainpred <- predict(trainmod, training)
length(trainpred)
length(complete.cases(training))
View(training)
?complete.cases
complete.cases(training)
length(training[complete.cases(training),])
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "gbm",trControl = trainControl(method = "repeatedcv", number = 10))
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "gbm",trControl = trainControl(method = "repeatedcv", number = 10), verbose = FALSE)
warnings()
trainmod
trainpred <- predict(trainmod, training)
length(trainpred)
confusionMatrix(trainpred,training$classe)
set.seed(3456)
trainmod <- train( classe ~., data = training, method = "gbm", verbose = FALSE)
trainpred <- predict(trainmod, training)
length(trainpred)
testing <- read.csv("~/pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
testing <- testing[, -(c(1,3:5))]
yaw <- grep("yaw", names(testing))
testing <- testing[, -yaw]
library(caret)
testpred <- predict(trainmod, testing)
trainpred <- predict(trainmod, training)
testpred <- predict(trainmod, testing)
View(testing)
testing <- read.csv("~/pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
testing <- testing[, -(c(1,3:5))]
View(testing)
length(training[complete.cases(training),])
View(training)
View(training)
is.na(training)
is.na(training) <- -500
is.na(training)
testing <- read.csv("~/pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
testing <- testing[, -(c(1,3:5))]
training[is.na(training)] <- -500
View(training)
testing <- read.csv("~/pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
training[is.na(training)] <- -500
testing <- read.csv("~/pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
View(training)
testing <- read.csv("~/pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
testing <- read.csv("~/pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
natrain < - training
natrain < - data.frame(training)
training2 <- training{1,}
training2 <- training[1,]
training2 <- training[,]
training2[is.na(training2)] <- -5
training[is.na(training)] <- -5
shinyapps::setAccountInfo(name='khailper',
token='C7144D22A806CCDB9A1C158CA6FD0281',
secret='<SECRET>')
library(shinyapps)
shinyapps::setAccountInfo(name='khailper',
token='C7144D22A806CCDB9A1C158CA6FD0281',
secret='<SECRET>')
shinyapps::setAccountInfo(name='khailper',
token='C7144D22A806CCDB9A1C158CA6FD0281',
secret='Sa/SJeWI0egUjtg8ar9SAWAZuJPETmvkLn+gqzyr')
setwd("C:/Users/Karl Hailperin/Savings")
shinyapps::deployApp()
?ifelse
?paste
paste("1st", "2nd", "3rd", collapse = ", ")
paste("1st", "2nd", "3rd", sep = ", ")
publish(title = 'Savings Pitch', 'index.html', host = 'rpubs')
library(devtools)
?publish
library(slidify)
publish(title = 'mytitle', 'index.html', host = 'rpubs')
setwd("~/RWorkDir/Savings_Deck")
publish(title = 'mytitle', 'index.html', host = 'rpubs')
?publish_rpubs
publish_rpubs("Savings Pitch")
publish_rpubs("Savings Pitch")
